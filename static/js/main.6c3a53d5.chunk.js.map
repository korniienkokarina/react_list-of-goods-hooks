{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","goods","visibleGoods","sort","firsGood","secondGood","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","isNotChanged","className","type","onClick","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAmBMC,EA/CD,SACLA,EAAiBF,EAAoBH,GAErC,IAAMM,EAAY,YAAOD,GAoBzB,OAlBAC,EAAaC,MAAK,SAACC,EAAUC,GAC3B,OAAQN,GACN,KAAKP,EAASc,SACZ,OAAOF,EAASG,cAAcF,GAEhC,KAAKb,EAASgB,OACZ,OAAOJ,EAASK,OAASJ,EAAWI,OAEtC,KAAKjB,EAASM,KACd,QACE,OAAO,MAITF,GACFM,EAAaQ,UAGRR,EAwBOS,CAAkBlB,EAAiBM,EAAUH,GAErDgB,EAAeb,IAAaP,EAASM,OAASF,EAEpD,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QA1Be,WACrBf,EAAYR,EAASc,WA0BfO,UAAWG,IAAW,iBAAkB,CACtC,WAAYjB,IAAaP,EAASc,WAJtC,iCAUA,wBACEQ,KAAK,SACLC,QAhCiB,WACvBf,EAAYR,EAASgB,SAgCfK,UAAWG,IAAW,oBAAqB,CACzC,WAAYjB,IAAaP,EAASgB,SAJtC,4BAUA,wBACEM,KAAK,SACLC,QAtCkB,WACxBlB,GAAeD,IAsCTiB,UAAWG,IAAW,oBAAqB,CACzC,YAAapB,IAJjB,sBAUEgB,GACA,wBACEE,KAAK,SACLC,QA7CU,WAClBlB,GAAc,GACdG,EAAYR,EAASM,OA4Cbe,UAAU,4BAHZ,sBAUJ,6BACE,6BACGZ,EAAMgB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cCvHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6c3a53d5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[], sortType: SortType, isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((firsGood, secondGood) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return firsGood.localeCompare(secondGood);\n\n      case SortType.LENGTH:\n        return firsGood.length - secondGood.length;\n\n      case SortType.NONE:\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handleNameSort = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleLengthSort = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleReverseSort = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const goods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n\n  const isNotChanged = sortType === SortType.NONE && !isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={handleNameSort}\n          className={classNames('button is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleLengthSort}\n          className={classNames('button is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleReverseSort}\n          className={classNames('button is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {!isNotChanged && (\n          <button\n            type=\"button\"\n            onClick={handleReset}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}